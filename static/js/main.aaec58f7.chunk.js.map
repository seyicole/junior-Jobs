{"version":3,"sources":["components/Paginate.js","Utils.js","components/Jobs.js","Subscribe.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Paginate","postsPerPage","totalPosts","paging","pageNumbers","i","Math","ceil","push","className","map","number","key","onClick","href","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","Jobs","jobs","loading","class","Spinner","animation","variant","role","job","Container","Card","Body","url","target","rel","company","title","type","location","created","style","fontSize","color","Subscribe","action","fields","name","placeholder","required","Component","Header","Navbar","fixed","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","App","useState","setJobs","setLoading","currentPage","setCurrentPage","useEffect","a","async","fetch","res","json","jobList","fetchPosts","console","log","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaec58f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Paginate.css';\r\n\r\n\r\nconst Paginate = ({postsPerPage, totalPosts, paging}) => {\r\n\tconst pageNumbers = [];\r\n\r\n\r\n\tfor (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++){\r\n\tpageNumbers.push(i)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li className='pagination'>\r\n\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\tpageNumbers.map(number =>(\r\n\r\n\t\t\t\r\n\t\t\t\t\t\t<a key={number} onClick={() => paging(number)} href=\"#\">\r\n\t\t\t\t\t\t\t{number}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\nexport default Paginate;","function timeDifference(current, previous) {\r\n  const milliSecondsPerMinute = 60 * 1000\r\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\r\n  const milliSecondsPerDay = milliSecondsPerHour * 24\r\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\r\n  const milliSecondsPerYear = milliSecondsPerDay * 365\r\n\r\n  const elapsed = current - previous\r\n\r\n  if (elapsed < milliSecondsPerMinute / 3) {\r\n    return 'just now'\r\n  }\r\n\r\n  if (elapsed < milliSecondsPerMinute) {\r\n    return 'less than 1 min ago'\r\n  } else if (elapsed < milliSecondsPerHour) {\r\n    return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\r\n  } else if (elapsed < milliSecondsPerDay) {\r\n    return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\r\n  } else if (elapsed < milliSecondsPerMonth) {\r\n    return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\r\n  } else if (elapsed < milliSecondsPerYear) {\r\n    return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\r\n  } else {\r\n    return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\r\n  }\r\n}\r\n\r\nexport function timeDifferenceForDate(date) {\r\n  const now = new Date().getTime()\r\n  const updated = new Date(date).getTime()\r\n  return timeDifference(now, updated)\r\n}","import React from 'react';\r\nimport './Jobs.css';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\nimport { timeDifferenceForDate } from '../Utils';\r\n\r\n\r\nconst Jobs = ({jobs, loading}) => {\r\n\tif(loading){\r\n\t\treturn <div class=\"d-flex spin mx-auto justify-content-center align-content-*-center\">\r\n                    <Spinner class=\"\" animation=\"border\" variant=\"info\" role=\"status\">\r\n                      <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                  </div>\r\n\t}\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{jobs.map(job =>(\r\n\t\t\t\t<Container>\r\n\t<li>\r\n\t<Card>\r\n\t  <Card.Body>\r\n\t  \r\n\t\t<a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\" >\r\n\t\t<div className='d-flex justify-content-between'>\r\n\t\t\t<p><span className='font-weight-bold'>\r\n\t\t\t\t{job.company}\r\n\t\t\t\t</span>  is hiring - junior <span className='font-weight-bold'>\r\n\t\t\t\t{job.title}\r\n\t\t\t\t</span>\r\n\t\t\t</p>\r\n\t\t</div>\t\r\n\t\t<div className=\"d-flex justify-content-between text-muted\">\t\r\n\t\t\t<p>{job.type}</p>\r\n\t\t\t<p>{job.location}</p>\r\n\t\t\t<p>{timeDifferenceForDate(job.created)}</p>\r\n\t\t\t<i className=\"fa fa-external-link-square\" style={{fontSize:'24px',color:'#17a2b8'}}></i>\r\n\t\t</div>\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\t</a>\r\n\t\t\r\n\t  </Card.Body>\r\n\t</Card>\r\n\t</li>\r\n\t </Container>\r\n\t\t\t\t))\r\n\r\n\t\t\t}\r\n\t\t</ul>\r\n\r\n\t)\r\n}\r\n\r\nexport default Jobs;","import React, {Component} from 'react';\r\nimport Mailchimp from \"react-mailchimp-form\";\r\n \r\n// a basic form\r\nclass Subscribe extends Component {\r\n  render() {\r\n    return (\r\n        <Mailchimp\r\n        action='https://online.us20.list-manage.com/subscribe/post?u=4f1afcca43ca08b73ec2efa94&amp;id=26984899a7'\r\n        fields={[\r\n          {\r\n            name: 'EMAIL',\r\n            placeholder: 'Email',\r\n            type: 'email',\r\n            required: true\r\n          }\r\n        ]}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Subscribe;","import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\nimport Subscribe from './Subscribe.js';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t\r\n\t\t\t<Navbar fixed=\"top\"  expand=\"lg\">\r\n\t\t\t\t <Container>\r\n\t\t\t    <Navbar.Brand href=\"#home\" className='display-3'><span className=\"font-weight-bold\">Hacker</span>Jobs</Navbar.Brand>\r\n\t\t\t\t  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\t\t\t\t  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n\t\t\t\t \r\n\t\t\t\t    <Nav className=\"mr-auto\">\r\n\t\t\t\t      <Nav.Link href=\"#home\" className='display-3'></Nav.Link>\r\n\t\t\t\t     \r\n\t\t\t\t    </Nav>\r\n\t\t\t\t    <Subscribe />\r\n\t\t\t\t</Navbar.Collapse>\r\n\t\t\t\t </Container>\r\n\t\t\t</Navbar>\r\n\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, {useState, useEffect } from 'react';\r\nimport Pagination from './components/Paginate';\r\nimport Jobs from './components/Jobs';\r\nimport Header from './Header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10);\r\n\r\n  useEffect (()=> {\r\n    const fetchPosts = async ()=>{\r\n      setLoading(true)\r\n     const res = await fetch('https://obscure-sands-69987.herokuapp.com/api/v1/do-n0t-disturb/jobs/')\r\n      let jobList = await res.json()\r\n      setJobs(jobList)\r\n      setLoading(false)\r\n    }\r\n    fetchPosts()\r\n  }, [])\r\n  console.log(jobs);\r\n\r\n  //Get current job post\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = jobs.slice(indexOfFirstPost, indexOfLastPost); \r\n\r\n  //Change Page\r\n  const paging = pageNumber => setCurrentPage(pageNumber)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />                                                                    \r\n      <Jobs jobs={currentPosts} loading={loading} />\r\n      <Pagination \r\n        postsPerPage={postsPerPage} \r\n        totalPosts={jobs.length} \r\n        paging={paging} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}